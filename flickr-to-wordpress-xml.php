#!/usr/bin/env php
<?php
/**
 * Flickr to WordPress XML Exporter
 * 
 * Converts Flickr JSON data to WordPress WXR XML format
 * for import via WordPress Admin → Tools → Import → WordPress
 * 
 * Requirements: PHP 8.3+
 * Usage: php flickr-to-wordpress-xml.php --json-dir=path --output=file.xml
 */

declare(strict_types=1);

class FlickrToWordPressXMLExporter
{
    private array $options = [];
    private int $postIdCounter = 10000;
    private int $termIdCounter = 10000;
    private array $albumTagMap = [];
    private $xmlFile;
    
    public function __construct(array $options)
    {
        $this->options = array_merge([
            'site-url' => 'https://example.com',
            'author' => 'admin',
            'dry-run' => false,
            'verbose' => false,
            'start-post-id' => 10000,
            'start-term-id' => 10000
        ], $options);
        
        $this->validateOptions();
        
        // Set ID counters based on options
        $this->postIdCounter = (int)$this->options['start-post-id'];
        $this->termIdCounter = (int)$this->options['start-term-id'];
    }
    
    private function validateOptions(): void
    {
        if (!isset($this->options['json-dir']) || !is_dir($this->options['json-dir'])) {
            throw new InvalidArgumentException('--json-dir must be a valid directory');
        }
        
        if (!isset($this->options['output'])) {
            throw new InvalidArgumentException('--output is required');
        }
        
        if (!$this->options['dry-run'] && !is_writable(dirname($this->options['output']))) {
            throw new InvalidArgumentException('Output directory must be writable');
        }
    }
    
    public function export(): void
    {
        $this->log("Starting Flickr to WordPress XML export...");
        
        $albumsData = $this->loadAlbumsData();
        $photoFiles = $this->getPhotoFiles();
        
        $this->log(sprintf("Found %d albums and %d photo files", count($albumsData['albums']), count($photoFiles)));
        
        if (!$this->options['dry-run']) {
            $this->xmlFile = fopen($this->options['output'], 'w');
            if (!$this->xmlFile) {
                throw new RuntimeException('Could not open output file for writing');
            }
        }
        
        try {
            $this->writeXMLHeader();
            $this->processTags($albumsData['albums']);
            $this->processPhotos($photoFiles, $albumsData['albums']);
            $this->writeXMLFooter();
            
            if (!$this->options['dry-run']) {
                fclose($this->xmlFile);
            }
            
            $this->log("Export completed successfully!");
            $this->printSummary();
            
        } catch (Exception $e) {
            if ($this->xmlFile) {
                fclose($this->xmlFile);
                if (!$this->options['dry-run']) {
                    unlink($this->options['output']);
                }
            }
            throw $e;
        }
    }
    
    private function loadAlbumsData(): array
    {
        $albumsFile = $this->options['json-dir'] . '/albums.json';
        if (!file_exists($albumsFile)) {
            throw new RuntimeException('albums.json not found in JSON directory');
        }
        
        $data = json_decode(file_get_contents($albumsFile), true);
        if (!$data || !isset($data['albums'])) {
            throw new RuntimeException('Invalid albums.json format');
        }
        
        return $data;
    }
    
    private function getPhotoFiles(): array
    {
        $pattern = $this->options['json-dir'] . '/photo_*.json';
        return glob($pattern) ?: [];
    }
    
    private function writeXMLHeader(): void
    {
        $siteUrl = $this->options['site-url'];
        $currentDate = date('r');
        
        $header = <<<XML
<?xml version="1.0" encoding="UTF-8" ?>
<!-- Generated by Flickr to WordPress XML Exporter -->
<rss version="2.0"
    xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:wfw="http://wellformedweb.org/CommentAPI/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:wp="http://wordpress.org/export/1.2/"
>
<channel>
    <title><![CDATA[Flickr Photo Import]]></title>
    <link>{$siteUrl}</link>
    <description><![CDATA[Imported from Flickr]]></description>
    <pubDate>{$currentDate}</pubDate>
    <language>en-US</language>
    <wp:wxr_version>1.2</wp:wxr_version>
    <wp:base_site_url>{$siteUrl}</wp:base_site_url>
    <wp:base_blog_url>{$siteUrl}</wp:base_blog_url>
    
    <wp:author>
        <wp:author_id>1</wp:author_id>
        <wp:author_login><![CDATA[{$this->options['author']}]]></wp:author_login>
        <wp:author_email><![CDATA[{$this->options['author']}@example.com]]></wp:author_email>
        <wp:author_display_name><![CDATA[{$this->options['author']}]]></wp:author_display_name>
    </wp:author>


XML;

        $this->writeXML($header);
    }
    
    private function processTags(array $albums): void
    {
        $this->log("Processing tags and categories...");
        
        // Add the main "From Flickr" category
        $flickrCategoryId = $this->termIdCounter++;
        $flickrCategoryXML = <<<XML
    <wp:category>
        <wp:term_id>{$flickrCategoryId}</wp:term_id>
        <wp:category_nicename><![CDATA[from-flickr]]></wp:category_nicename>
        <wp:cat_name><![CDATA[From Flickr]]></wp:cat_name>
        <wp:category_description><![CDATA[Photos imported from Flickr]]></wp:category_description>
        <wp:category_parent><![CDATA[]]></wp:category_parent>
    </wp:category>

XML;
        $this->writeXML($flickrCategoryXML);
        
        // Process albums as tags
        foreach ($albums as $album) {
            $tagId = $this->termIdCounter++;
            $tagName = $album['title'];
            $tagSlug = $this->generateSlug($tagName);
            $tagDescription = $album['description'] ?? '';
            
            $this->albumTagMap[$album['id']] = [
                'id' => $tagId,
                'name' => $tagName,
                'slug' => $tagSlug
            ];
            
            $tagXML = <<<XML
    <wp:tag>
        <wp:term_id>{$tagId}</wp:term_id>
        <wp:tag_slug><![CDATA[{$tagSlug}]]></wp:tag_slug>
        <wp:tag_name><![CDATA[{$tagName}]]></wp:tag_name>
        <wp:tag_description><![CDATA[{$tagDescription}]]></wp:tag_description>
    </wp:tag>

XML;
            
            $this->writeXML($tagXML);
            $this->verbose("Created tag: {$tagName} ({$tagSlug})");
        }
        
        $this->log(sprintf("Created %d album tags", count($albums)));
    }
    
    private function processPhotos(array $photoFiles, array $albums): void
    {
        $this->log("Processing photos...");
        $processed = 0;
        $skipped = 0;
        
        foreach ($photoFiles as $photoFile) {
            try {
                $photoData = json_decode(file_get_contents($photoFile), true);
                if (!$photoData) {
                    $this->log("ERROR: Corrupted JSON file: " . basename($photoFile));
                    $skipped++;
                    continue;
                }
                
                if (!isset($photoData['original'])) {
                    $this->log("WARNING: Missing original URL in: " . basename($photoFile));
                    $skipped++;
                    continue;
                }
                
                $this->processPhoto($photoData, $albums);
                $processed++;
                
                if ($processed % 50 === 0) {
                    $this->log("Processed {$processed} photos...");
                }
                
            } catch (Exception $e) {
                $this->log("ERROR processing " . basename($photoFile) . ": " . $e->getMessage());
                $skipped++;
            }
        }
        
        $this->log(sprintf("Processed %d photos, skipped %d", $processed, $skipped));
    }
    
    private function processPhoto(array $photo, array $albums): void
    {
        // Generate post data
        $postId = $this->postIdCounter++;
        $attachmentId = $this->postIdCounter++;
        
        $postTitle = $photo['name'] ?: "Photo taken at " . $photo['date_taken'];
        $postSlug = $this->generateSlug($postTitle);
        
        $postContent = $this->generatePostContent($photo, $attachmentId);
        $postDate = $this->formatDate($photo['date_imported'] ?: $photo['date_taken']);
        $postDateGMT = $this->formatDateGMT($photo['date_imported'] ?: $photo['date_taken']);
        
        $permalink = $this->options['site-url'] . '/' . date('Y/m/d', strtotime($postDate)) . '/' . $postSlug . '/';
        $guid = $this->options['site-url'] . '/?p=' . $postId;
        
        // Write attachment first
        $this->writeAttachment($attachmentId, $photo, $postId, $postDate, $postDateGMT);
        
        // Write post
        $postXML = <<<XML
    <item>
        <title><![CDATA[{$postTitle}]]></title>
        <link>{$permalink}</link>
        <pubDate>{$this->formatRFC2822($postDate)}</pubDate>
        <dc:creator><![CDATA[{$this->options['author']}]]></dc:creator>
        <guid isPermaLink="false">{$guid}</guid>
        <description></description>
        <content:encoded><![CDATA[{$postContent}]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>{$postId}</wp:post_id>
        <wp:post_date><![CDATA[{$postDate}]]></wp:post_date>
        <wp:post_date_gmt><![CDATA[{$postDateGMT}]]></wp:post_date_gmt>
        <wp:post_modified><![CDATA[{$postDate}]]></wp:post_modified>
        <wp:post_modified_gmt><![CDATA[{$postDateGMT}]]></wp:post_modified_gmt>
        <wp:comment_status><![CDATA[open]]></wp:comment_status>
        <wp:ping_status><![CDATA[open]]></wp:ping_status>
        <wp:post_name><![CDATA[{$postSlug}]]></wp:post_name>
        <wp:status><![CDATA[private]]></wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type><![CDATA[post]]></wp:post_type>
        <wp:post_password><![CDATA[]]></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        
        <category domain="category" nicename="from-flickr"><![CDATA[From Flickr]]></category>

XML;

        // Add album tags
        foreach ($photo['albums'] as $albumRef) {
            $albumId = is_array($albumRef) ? $albumRef['id'] : $albumRef;
            if (isset($this->albumTagMap[$albumId])) {
                $tag = $this->albumTagMap[$albumId];
                $postXML .= "        <category domain=\"post_tag\" nicename=\"{$tag['slug']}\"><![CDATA[{$tag['name']}]]></category>\n";
            }
        }
        
        $postXML .= <<<XML
    </item>

XML;

        $this->writeXML($postXML);
        $this->verbose("Created post: {$postTitle}");
    }

    private function writeAttachment(int $attachmentId, array $photo, int $parentId, string $postDate, string $postDateGMT): void
    {
        $attachmentSlug = $this->generateSlug($photo['name'] ?: 'photo-' . $photo['id']);
        $attachmentTitle = $photo['name'] ?: "Photo " . $photo['id'];
        $attachmentUrl = $photo['original'];
        
        $exifData = $this->formatEXIFData($photo['exif'] ?? []);
        
        $attachmentXML = <<<XML
    <item>
        <title><![CDATA[{$attachmentTitle}]]></title>
        <link>{$attachmentUrl}</link>
        <pubDate>{$this->formatRFC2822($postDate)}</pubDate>
        <dc:creator><![CDATA[{$this->options['author']}]]></dc:creator>
        <guid isPermaLink="false">{$attachmentUrl}</guid>
        <description><![CDATA[{$exifData}]]></description>
        <content:encoded><![CDATA[{$exifData}]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>{$attachmentId}</wp:post_id>
        <wp:post_date><![CDATA[{$postDate}]]></wp:post_date>
        <wp:post_date_gmt><![CDATA[{$postDateGMT}]]></wp:post_date_gmt>
        <wp:post_modified><![CDATA[{$postDate}]]></wp:post_modified>
        <wp:post_modified_gmt><![CDATA[{$postDateGMT}]]></wp:post_modified_gmt>
        <wp:comment_status><![CDATA[open]]></wp:comment_status>
        <wp:ping_status><![CDATA[closed]]></wp:ping_status>
        <wp:post_name><![CDATA[{$attachmentSlug}]]></wp:post_name>
        <wp:status><![CDATA[inherit]]></wp:status>
        <wp:post_parent>{$parentId}</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type><![CDATA[attachment]]></wp:post_type>
        <wp:post_password><![CDATA[]]></wp:post_password>
        <wp:is_sticky>0</wp:is_sticky>
        
        <wp:attachment_url><![CDATA[{$attachmentUrl}]]></wp:attachment_url>
    </item>

XML;

        $this->writeXML($attachmentXML);
    }
    
    private function generatePostContent(array $photo, int $attachmentId): string
    {
        $attachmentUrl = $photo['original'];
        $photoDescription = $photo['description'] ?? '';
        $dateTaken = $photo['date_taken'];
        $photopage = $photo['photopage'];
        
        // Generate WordPress Gutenberg blocks
        $content = [];
        
        // Image block
        $imageCaption = !empty($photoDescription) ? htmlspecialchars($photoDescription, ENT_QUOTES, 'UTF-8') : '';
        $content[] = "<!-- wp:image {\"id\":{$attachmentId},\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->";
        $content[] = "<figure class=\"wp-block-image size-large\"><img src=\"{$attachmentUrl}\" alt=\"\" class=\"wp-image-{$attachmentId}\"/><figcaption class=\"wp-element-caption\">{$imageCaption}</figcaption></figure>";
        $content[] = "<!-- /wp:image -->";
        $content[] = "";
        
        // Additional description paragraph (if different from caption or if we need more detail)
        if (!empty($photoDescription)) {
            $content[] = "<!-- wp:paragraph -->";
            $content[] = "<p></p>";
            $content[] = "<!-- /wp:paragraph -->";
            $content[] = "";
        }
        
        // Date taken paragraph
        $content[] = "<!-- wp:paragraph -->";
        $content[] = "<p>Taken on {$dateTaken}</p>";
        $content[] = "<!-- /wp:paragraph -->";
        $content[] = "";
        
        // Original Flickr URL paragraph
        $content[] = "<!-- wp:paragraph -->";
        $content[] = "<p>Originally from: <a href=\"{$photopage}\">{$photopage}</a></p>";
        $content[] = "<!-- /wp:paragraph -->";
        
        return implode("\n", $content);
    }
    
    private function formatEXIFData(array $exif): string
    {
        if (empty($exif)) {
            return '';
        }
        
        $lines = ['flickr_exif_data:'];
        foreach ($exif as $key => $value) {
            $lines[] = "• {$key}: {$value}";
        }
        
        return implode("\n", $lines);
    }
    
    private function generateSlug(string $text): string
    {
        // Strip HTML tags
        $text = strip_tags($text);
        
        // Remove accents and convert to ASCII (simplified version of WordPress remove_accents)
        $text = $this->removeAccents($text);
        
        // Convert to lowercase
        $text = strtolower($text);
        
        // Replace common HTML entities and special chars with hyphens
        $text = str_replace(['&nbsp;', '&#160;', '&ndash;', '&#8211;', '&mdash;', '&#8212;'], '-', $text);
        $text = str_replace('/', '-', $text);
        
        // Remove non-alphanumeric characters except spaces and hyphens
        $text = preg_replace('/[^a-z0-9\s-]/', '', $text);
        
        // Replace multiple spaces/hyphens with single hyphen
        $text = preg_replace('/[\s-]+/', '-', $text);
        
        // Trim hyphens from start and end
        return trim($text, '-');
    }
    
    private function removeAccents(string $text): string
    {
        // Simplified version of WordPress remove_accents function
        $chars = [
            // Latin-1 Supplement
            'À' => 'A', 'Á' => 'A', 'Â' => 'A', 'Ã' => 'A', 'Ä' => 'A', 'Å' => 'A',
            'à' => 'a', 'á' => 'a', 'â' => 'a', 'ã' => 'a', 'ä' => 'a', 'å' => 'a',
            'È' => 'E', 'É' => 'E', 'Ê' => 'E', 'Ë' => 'E',
            'è' => 'e', 'é' => 'e', 'ê' => 'e', 'ë' => 'e',
            'Ì' => 'I', 'Í' => 'I', 'Î' => 'I', 'Ï' => 'I',
            'ì' => 'i', 'í' => 'i', 'î' => 'i', 'ï' => 'i',
            'Ò' => 'O', 'Ó' => 'O', 'Ô' => 'O', 'Õ' => 'O', 'Ö' => 'O',
            'ò' => 'o', 'ó' => 'o', 'ô' => 'o', 'õ' => 'o', 'ö' => 'o',
            'Ù' => 'U', 'Ú' => 'U', 'Û' => 'U', 'Ü' => 'U',
            'ù' => 'u', 'ú' => 'u', 'û' => 'u', 'ü' => 'u',
            'Ý' => 'Y', 'ý' => 'y', 'ÿ' => 'y',
            'Ç' => 'C', 'ç' => 'c', 'Ñ' => 'N', 'ñ' => 'n',
            // Vietnamese
            'Ạ' => 'A', 'Ả' => 'A', 'Ấ' => 'A', 'Ầ' => 'A', 'Ẩ' => 'A', 'Ẫ' => 'A', 'Ậ' => 'A',
            'Ắ' => 'A', 'Ằ' => 'A', 'Ẳ' => 'A', 'Ẵ' => 'A', 'Ặ' => 'A',
            'ạ' => 'a', 'ả' => 'a', 'ấ' => 'a', 'ầ' => 'a', 'ẩ' => 'a', 'ẫ' => 'a', 'ậ' => 'a',
            'ắ' => 'a', 'ằ' => 'a', 'ẳ' => 'a', 'ẵ' => 'a', 'ặ' => 'a',
            'Ẹ' => 'E', 'Ẻ' => 'E', 'Ẽ' => 'E', 'Ế' => 'E', 'Ề' => 'E', 'Ể' => 'E', 'Ễ' => 'E', 'Ệ' => 'E',
            'ẹ' => 'e', 'ẻ' => 'e', 'ẽ' => 'e', 'ế' => 'e', 'ề' => 'e', 'ể' => 'e', 'ễ' => 'e', 'ệ' => 'e',
            'Ị' => 'I', 'Ỉ' => 'I', 'Ĩ' => 'I',
            'ị' => 'i', 'ỉ' => 'i', 'ĩ' => 'i',
            'Ọ' => 'O', 'Ỏ' => 'O', 'Ố' => 'O', 'Ồ' => 'O', 'Ổ' => 'O', 'Ỗ' => 'O', 'Ộ' => 'O',
            'Ớ' => 'O', 'Ờ' => 'O', 'Ở' => 'O', 'Ỡ' => 'O', 'Ợ' => 'O',
            'ọ' => 'o', 'ỏ' => 'o', 'ố' => 'o', 'ồ' => 'o', 'ổ' => 'o', 'ỗ' => 'o', 'ộ' => 'o',
            'ớ' => 'o', 'ờ' => 'o', 'ở' => 'o', 'ỡ' => 'o', 'ợ' => 'o',
            'Ụ' => 'U', 'Ủ' => 'U', 'Ũ' => 'U', 'Ư' => 'U', 'Ứ' => 'U', 'Ừ' => 'U', 'Ử' => 'U', 'Ữ' => 'U', 'Ự' => 'U',
            'ụ' => 'u', 'ủ' => 'u', 'ũ' => 'u', 'ư' => 'u', 'ứ' => 'u', 'ừ' => 'u', 'ử' => 'u', 'ữ' => 'u', 'ự' => 'u',
            'Ỳ' => 'Y', 'Ỷ' => 'Y', 'Ỹ' => 'Y', 'Ỵ' => 'Y',
            'ỳ' => 'y', 'ỷ' => 'y', 'ỹ' => 'y', 'ỵ' => 'y',
            'Đ' => 'D', 'đ' => 'd'
        ];
        
        return strtr($text, $chars);
    }
    
    private function formatDate(string $date): string
    {
        return date('Y-m-d H:i:s', strtotime($date));
    }
    
    private function formatDateGMT(string $date): string
    {
        return gmdate('Y-m-d H:i:s', strtotime($date));
    }
    
    private function formatRFC2822(string $date): string
    {
        return date('r', strtotime($date));
    }
    
    private function writeXMLFooter(): void
    {
        $footer = <<<XML
</channel>
</rss>
XML;
        $this->writeXML($footer);
    }
    
    private function writeXML(string $content): void
    {
        if (!$this->options['dry-run']) {
            fwrite($this->xmlFile, $content);
        }
    }
    
    private function log(string $message): void
    {
        echo "[" . date('Y-m-d H:i:s') . "] {$message}\n";
    }
    
    private function verbose(string $message): void
    {
        if ($this->options['verbose']) {
            echo "[VERBOSE] {$message}\n";
        }
    }
    
    private function printSummary(): void
    {
        echo "\n=== Export Summary ===\n";
        echo "Albums processed: " . count($this->albumTagMap) . "\n";
        echo "Posts created: " . ($this->postIdCounter - 1) / 2 . "\n"; // Divide by 2 since we create post + attachment
        echo "Output file: " . $this->options['output'] . "\n";
        
        if ($this->options['dry-run']) {
            echo "DRY RUN: No files were actually created\n";
        } else {
            echo "File size: " . $this->formatBytes(filesize($this->options['output'])) . "\n";
        }
        echo "=====================\n\n";
    }
    
    private function formatBytes(int $bytes): string
    {
        $units = ['B', 'KB', 'MB', 'GB'];
        $bytes = max($bytes, 0);
        $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
        $pow = min($pow, count($units) - 1);
        
        $bytes /= pow(1024, $pow);
        
        return round($bytes, 2) . ' ' . $units[$pow];
    }
}

// Command line interface
function parseArguments(): array
{
    $options = [];
    $args = array_slice($GLOBALS['argv'], 1);
    
    foreach ($args as $arg) {
        if (strpos($arg, '--') === 0) {
            $parts = explode('=', substr($arg, 2), 2);
            $key = $parts[0];
            $value = $parts[1] ?? true;
            
            // Handle boolean flags
            if ($value === 'true') $value = true;
            if ($value === 'false') $value = false;
            
            $options[$key] = $value;
        }
    }
    
    return $options;
}

function showHelp(): void
{
    echo <<<HELP
Flickr to WordPress XML Exporter

Usage: php flickr-to-wordpress-xml.php [OPTIONS]

Required Options:
  --json-dir=PATH      Path to Flickr JSON files directory
  --output=FILE        Output XML file path

Optional Options:
  --site-url=URL       Base URL for permalinks (default: https://example.com)
  --author=USER        WordPress author username (default: admin)
  --start-post-id=NUM  Starting ID for posts and attachments (default: 10000)
  --start-term-id=NUM  Starting ID for tags and categories (default: 10000)
  --dry-run           Generate XML without writing file, show statistics
  --verbose           Show detailed processing information
  --help              Show this help message

Examples:
  php flickr-to-wordpress-xml.php --json-dir=./flickr-data/json --output=./flickr-import.xml
  php flickr-to-wordpress-xml.php --json-dir=./flickr-data/json --output=./flickr-import.xml --site-url=https://mysite.com --verbose
  php flickr-to-wordpress-xml.php --json-dir=./flickr-data/json --output=./test.xml --dry-run
  php flickr-to-wordpress-xml.php --json-dir=./flickr-data/json --output=./flickr-import.xml --start-post-id=1000 --start-term-id=500

HELP;
}

// Main execution
try {
    $options = parseArguments();
    
    if (isset($options['help']) || empty($options)) {
        showHelp();
        exit(0);
    }
    
    if (!isset($options['json-dir']) || !isset($options['output'])) {
        echo "ERROR: --json-dir and --output are required\n\n";
        showHelp();
        exit(1);
    }
    
    $exporter = new FlickrToWordPressXMLExporter($options);
    $exporter->export();
    
} catch (Exception $e) {
    echo "ERROR: " . $e->getMessage() . "\n";
    exit(1);
}